{
  "version": 3,
  "sources": ["../../node_modules/react-error-boundary/dist/react-error-boundary.development.js"],
  "sourcesContent": ["'use client';\nimport { createContext, Component, createElement, useContext, useState, useMemo, forwardRef } from 'react';\n\nconst ErrorBoundaryContext = createContext(null);\n\nconst initialState = {\n  didCatch: false,\n  error: null\n};\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.resetErrorBoundary = this.resetErrorBoundary.bind(this);\n    this.state = initialState;\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      didCatch: true,\n      error\n    };\n  }\n  resetErrorBoundary() {\n    const {\n      error\n    } = this.state;\n    if (error !== null) {\n      var _this$props$onReset, _this$props;\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      (_this$props$onReset = (_this$props = this.props).onReset) === null || _this$props$onReset === void 0 ? void 0 : _this$props$onReset.call(_this$props, {\n        args,\n        reason: \"imperative-api\"\n      });\n      this.setState(initialState);\n    }\n  }\n  componentDidCatch(error, info) {\n    var _this$props$onError, _this$props2;\n    (_this$props$onError = (_this$props2 = this.props).onError) === null || _this$props$onError === void 0 ? void 0 : _this$props$onError.call(_this$props2, error, info);\n  }\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      didCatch\n    } = this.state;\n    const {\n      resetKeys\n    } = this.props;\n\n    // There's an edge case where if the thing that triggered the error happens to *also* be in the resetKeys array,\n    // we'd end up resetting the error boundary immediately.\n    // This would likely trigger a second error to be thrown.\n    // So we make sure that we don't check the resetKeys on the first call of cDU after the error is set.\n\n    if (didCatch && prevState.error !== null && hasArrayChanged(prevProps.resetKeys, resetKeys)) {\n      var _this$props$onReset2, _this$props3;\n      (_this$props$onReset2 = (_this$props3 = this.props).onReset) === null || _this$props$onReset2 === void 0 ? void 0 : _this$props$onReset2.call(_this$props3, {\n        next: resetKeys,\n        prev: prevProps.resetKeys,\n        reason: \"keys\"\n      });\n      this.setState(initialState);\n    }\n  }\n  render() {\n    const {\n      children,\n      fallbackRender,\n      FallbackComponent,\n      fallback\n    } = this.props;\n    const {\n      didCatch,\n      error\n    } = this.state;\n    let childToRender = children;\n    if (didCatch) {\n      const props = {\n        error,\n        resetErrorBoundary: this.resetErrorBoundary\n      };\n      if (typeof fallbackRender === \"function\") {\n        childToRender = fallbackRender(props);\n      } else if (FallbackComponent) {\n        childToRender = createElement(FallbackComponent, props);\n      } else if (fallback !== undefined) {\n        childToRender = fallback;\n      } else {\n        {\n          console.error(\"react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop\");\n        }\n        throw error;\n      }\n    }\n    return createElement(ErrorBoundaryContext.Provider, {\n      value: {\n        didCatch,\n        error,\n        resetErrorBoundary: this.resetErrorBoundary\n      }\n    }, childToRender);\n  }\n}\nfunction hasArrayChanged() {\n  let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return a.length !== b.length || a.some((item, index) => !Object.is(item, b[index]));\n}\n\nfunction assertErrorBoundaryContext(value) {\n  if (value == null || typeof value.didCatch !== \"boolean\" || typeof value.resetErrorBoundary !== \"function\") {\n    throw new Error(\"ErrorBoundaryContext not found\");\n  }\n}\n\nfunction useErrorBoundary() {\n  const context = useContext(ErrorBoundaryContext);\n  assertErrorBoundaryContext(context);\n  const [state, setState] = useState({\n    error: null,\n    hasError: false\n  });\n  const memoized = useMemo(() => ({\n    resetBoundary: () => {\n      context.resetErrorBoundary();\n      setState({\n        error: null,\n        hasError: false\n      });\n    },\n    showBoundary: error => setState({\n      error,\n      hasError: true\n    })\n  }), [context.resetErrorBoundary]);\n  if (state.hasError) {\n    throw state.error;\n  }\n  return memoized;\n}\n\nfunction withErrorBoundary(component, errorBoundaryProps) {\n  const Wrapped = forwardRef((props, ref) => createElement(ErrorBoundary, errorBoundaryProps, createElement(component, {\n    ...props,\n    ref\n  })));\n\n  // Format for display in DevTools\n  const name = component.displayName || component.name || \"Unknown\";\n  Wrapped.displayName = \"withErrorBoundary(\".concat(name, \")\");\n  return Wrapped;\n}\n\nexport { ErrorBoundary, ErrorBoundaryContext, useErrorBoundary, withErrorBoundary };\n"],
  "mappings": "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",
  "names": ["import_react", "ErrorBoundaryContext", "initialState", "ErrorBoundary", "props", "error", "_this$props$onReset", "_this$props", "_len", "args", "_key", "info", "_this$props$onError", "_this$props2", "prevProps", "prevState", "didCatch", "resetKeys", "hasArrayChanged", "_this$props$onReset2", "_this$props3", "children", "fallbackRender", "FallbackComponent", "fallback", "childToRender", "a", "b", "item", "index", "assertErrorBoundaryContext", "value", "useErrorBoundary", "context", "state", "setState", "memoized", "withErrorBoundary", "component", "errorBoundaryProps", "Wrapped", "ref", "name"]
}
