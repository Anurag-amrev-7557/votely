{
  "version": 3,
  "sources": ["../../node_modules/react-chartjs-2/src/utils.ts", "../../node_modules/react-chartjs-2/src/chart.tsx", "../../node_modules/react-chartjs-2/src/typedCharts.tsx"],
  "sourcesContent": ["import type { MouseEvent } from 'react';\nimport type {\n  ChartType,\n  ChartData,\n  DefaultDataPoint,\n  ChartDataset,\n  ChartOptions,\n  Chart,\n} from 'chart.js';\n\nimport type { ForwardedRef } from './types.js';\n\nconst defaultDatasetIdKey = 'label';\n\nexport function reforwardRef<T>(ref: ForwardedRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  const options = chart.options;\n\n  if (options && nextOptions) {\n    Object.assign(options, nextOptions);\n  }\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels;\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[],\n  datasetIdKey = defaultDatasetIdKey\n) {\n  const addedDatasets: ChartDataset<TType, TData>[] = [];\n\n  currentData.datasets = nextDatasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = currentData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      );\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset } as ChartDataset<TType, TData>;\n      }\n\n      addedDatasets.push(currentDataset);\n\n      Object.assign(currentDataset, nextDataset);\n\n      return currentDataset;\n    }\n  );\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(data: ChartData<TType, TData, TLabel>, datasetIdKey = defaultDatasetIdKey) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: [],\n  };\n\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n\n  return nextData;\n}\n\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getDatasetAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'dataset',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'nearest',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementsAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'index',\n    { intersect: true },\n    false\n  );\n}\n", "import React, { useEffect, useRef, forwardRef } from 'react';\nimport { Chart as ChartJS } from 'chart.js';\nimport type { ChartType, DefaultDataPoint } from 'chart.js';\n\nimport type { ForwardedRef, ChartProps, BaseChartComponent } from './types.js';\nimport {\n  reforwardRef,\n  cloneData,\n  setOptions,\n  setLabels,\n  setDatasets,\n} from './utils.js';\n\nfunction ChartComponent<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(\n  props: ChartProps<TType, TData, TLabel>,\n  ref: ForwardedRef<ChartJS<TType, TData, TLabel>>\n) {\n  const {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    updateMode,\n    ...canvasProps\n  } = props;\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<ChartJS<TType, TData, TLabel> | null>(null);\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n\n    chartRef.current = new ChartJS(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options: options && { ...options },\n      plugins,\n    });\n\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      role='img'\n      height={height}\n      width={width}\n      {...canvasProps}\n    >\n      {fallbackContent}\n    </canvas>\n  );\n}\n\nexport const Chart = forwardRef(ChartComponent) as BaseChartComponent;\n", "import React, { forwardRef } from 'react';\nimport {\n  Chart as ChartJS,\n  LineController,\n  BarController,\n  RadarController,\n  DoughnutController,\n  PolarAreaController,\n  BubbleController,\n  PieController,\n  ScatterController,\n} from 'chart.js';\nimport type { ChartType, ChartComponentLike } from 'chart.js';\n\nimport type {\n  ChartProps,\n  ChartJSOrUndefined,\n  TypedChartComponent,\n} from './types.js';\nimport { Chart } from './chart.js';\n\nfunction createTypedChart<T extends ChartType>(\n  type: T,\n  registerables: ChartComponentLike\n) {\n  ChartJS.register(registerables);\n\n  return forwardRef<ChartJSOrUndefined<T>, Omit<ChartProps<T>, 'type'>>(\n    (props, ref) => <Chart {...props} ref={ref} type={type} />\n  ) as TypedChartComponent<T>;\n}\n\nexport const Line = /* #__PURE__ */ createTypedChart('line', LineController);\n\nexport const Bar = /* #__PURE__ */ createTypedChart('bar', BarController);\n\nexport const Radar = /* #__PURE__ */ createTypedChart('radar', RadarController);\n\nexport const Doughnut = /* #__PURE__ */ createTypedChart(\n  'doughnut',\n  DoughnutController\n);\n\nexport const PolarArea = /* #__PURE__ */ createTypedChart(\n  'polarArea',\n  PolarAreaController\n);\n\nexport const Bubble = /* #__PURE__ */ createTypedChart(\n  'bubble',\n  BubbleController\n);\n\nexport const Pie = /* #__PURE__ */ createTypedChart('pie', PieController);\n\nexport const Scatter = /* #__PURE__ */ createTypedChart(\n  'scatter',\n  ScatterController\n);\n"],
  "mappings": "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",
  "names": ["defaultDatasetIdKey", "reforwardRef", "ref", "value", "current", "setOptions", "chart", "nextOptions", "options", "Object", "assign", "setLabels", "currentData", "nextLabels", "labels", "setDatasets", "nextDatasets", "datasetIdKey", "addedDatasets", "datasets", "map", "nextDataset", "currentDataset", "find", "dataset", "data", "includes", "push", "cloneData", "nextData", "getDatasetAtEvent", "event", "getElementsAtEventForMode", "nativeEvent", "intersect", "getElementAtEvent", "getElementsAtEvent", "ChartComponent", "props", "height", "width", "redraw", "type", "plugins", "fallbackContent", "updateMode", "canvasProps", "canvasRef", "useRef", "chartRef", "renderChart", "ChartJS", "destroyChart", "destroy", "useEffect", "config", "setTimeout", "update", "React", "canvas", "role", "Chart", "forwardRef", "createTypedChart", "registerables", "register", "Line", "LineController", "Bar", "BarController", "Radar", "RadarController", "Doughnut", "DoughnutController", "PolarArea", "PolarAreaController", "Bubble", "BubbleController", "Pie", "PieController", "Scatter", "ScatterController"]
}
