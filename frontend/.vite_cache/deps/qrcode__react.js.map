{
  "version": 3,
  "sources": ["../../node_modules/qrcode.react/lib/esm/index.js"],
  "sourcesContent": ["var __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\n\n// src/index.tsx\nimport React from \"react\";\n\n// src/third-party/qrcodegen/index.ts\n/**\n * @license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\nvar qrcodegen;\n((qrcodegen2) => {\n  const _QrCode = class _QrCode {\n    /*-- Constructor (low level) and fields --*/\n    // Creates a new QR Code with the given version number,\n    // error correction level, data codeword bytes, and mask number.\n    // This is a low-level API that most users should not use directly.\n    // A mid-level API is the encodeSegments() function.\n    constructor(version, errorCorrectionLevel, dataCodewords, msk) {\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      // The modules of this QR Code (false = light, true = dark).\n      // Immutable after constructor finishes. Accessed through getModule().\n      this.modules = [];\n      // Indicates function modules that are not subjected to masking. Discarded when constructor finishes.\n      this.isFunction = [];\n      if (version < _QrCode.MIN_VERSION || version > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version value out of range\");\n      if (msk < -1 || msk > 7)\n        throw new RangeError(\"Mask value out of range\");\n      this.size = version * 4 + 17;\n      let row = [];\n      for (let i = 0; i < this.size; i++)\n        row.push(false);\n      for (let i = 0; i < this.size; i++) {\n        this.modules.push(row.slice());\n        this.isFunction.push(row.slice());\n      }\n      this.drawFunctionPatterns();\n      const allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n      if (msk == -1) {\n        let minPenalty = 1e9;\n        for (let i = 0; i < 8; i++) {\n          this.applyMask(i);\n          this.drawFormatBits(i);\n          const penalty = this.getPenaltyScore();\n          if (penalty < minPenalty) {\n            msk = i;\n            minPenalty = penalty;\n          }\n          this.applyMask(i);\n        }\n      }\n      assert(0 <= msk && msk <= 7);\n      this.mask = msk;\n      this.applyMask(msk);\n      this.drawFormatBits(msk);\n      this.isFunction = [];\n    }\n    /*-- Static factory functions (high level) --*/\n    // Returns a QR Code representing the given Unicode text string at the given error correction level.\n    // As a conservative upper bound, this function is guaranteed to succeed for strings that have 738 or fewer\n    // Unicode code points (not UTF-16 code units) if the low error correction level is used. The smallest possible\n    // QR Code version is automatically chosen for the output. The ECC level of the result may be higher than the\n    // ecl argument if it can be done without increasing the version.\n    static encodeText(text, ecl) {\n      const segs = qrcodegen2.QrSegment.makeSegments(text);\n      return _QrCode.encodeSegments(segs, ecl);\n    }\n    // Returns a QR Code representing the given binary data at the given error correction level.\n    // This function always encodes using the binary segment mode, not any text mode. The maximum number of\n    // bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output.\n    // The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.\n    static encodeBinary(data, ecl) {\n      const seg = qrcodegen2.QrSegment.makeBytes(data);\n      return _QrCode.encodeSegments([seg], ecl);\n    }\n    /*-- Static factory functions (mid level) --*/\n    // Returns a QR Code representing the given segments with the given encoding parameters.\n    // The smallest possible QR Code version within the given range is automatically\n    // chosen for the output. Iff boostEcl is true, then the ECC level of the result\n    // may be higher than the ecl argument if it can be done without increasing the\n    // version. The mask number is either between 0 to 7 (inclusive) to force that\n    // mask, or -1 to automatically choose an appropriate mask (which may be slow).\n    // This function allows the user to create a custom sequence of segments that switches\n    // between modes (such as alphanumeric and byte) to encode text in less space.\n    // This is a mid-level API; the high-level API is encodeText() and encodeBinary().\n    static encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n      if (!(_QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= _QrCode.MAX_VERSION) || mask < -1 || mask > 7)\n        throw new RangeError(\"Invalid value\");\n      let version;\n      let dataUsedBits;\n      for (version = minVersion; ; version++) {\n        const dataCapacityBits2 = _QrCode.getNumDataCodewords(version, ecl) * 8;\n        const usedBits = QrSegment.getTotalBits(segs, version);\n        if (usedBits <= dataCapacityBits2) {\n          dataUsedBits = usedBits;\n          break;\n        }\n        if (version >= maxVersion)\n          throw new RangeError(\"Data too long\");\n      }\n      for (const newEcl of [_QrCode.Ecc.MEDIUM, _QrCode.Ecc.QUARTILE, _QrCode.Ecc.HIGH]) {\n        if (boostEcl && dataUsedBits <= _QrCode.getNumDataCodewords(version, newEcl) * 8)\n          ecl = newEcl;\n      }\n      let bb = [];\n      for (const seg of segs) {\n        appendBits(seg.mode.modeBits, 4, bb);\n        appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n        for (const b of seg.getData())\n          bb.push(b);\n      }\n      assert(bb.length == dataUsedBits);\n      const dataCapacityBits = _QrCode.getNumDataCodewords(version, ecl) * 8;\n      assert(bb.length <= dataCapacityBits);\n      appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n      appendBits(0, (8 - bb.length % 8) % 8, bb);\n      assert(bb.length % 8 == 0);\n      for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)\n        appendBits(padByte, 8, bb);\n      let dataCodewords = [];\n      while (dataCodewords.length * 8 < bb.length)\n        dataCodewords.push(0);\n      bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n      return new _QrCode(version, ecl, dataCodewords, mask);\n    }\n    /*-- Accessor methods --*/\n    // Returns the color of the module (pixel) at the given coordinates, which is false\n    // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n    // If the given coordinates are out of bounds, then false (light) is returned.\n    getModule(x, y) {\n      return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n    }\n    // Modified to expose modules for easy access\n    getModules() {\n      return this.modules;\n    }\n    /*-- Private helper methods for constructor: Drawing function modules --*/\n    // Reads this object's version field, and draws and marks all function modules.\n    drawFunctionPatterns() {\n      for (let i = 0; i < this.size; i++) {\n        this.setFunctionModule(6, i, i % 2 == 0);\n        this.setFunctionModule(i, 6, i % 2 == 0);\n      }\n      this.drawFinderPattern(3, 3);\n      this.drawFinderPattern(this.size - 4, 3);\n      this.drawFinderPattern(3, this.size - 4);\n      const alignPatPos = this.getAlignmentPatternPositions();\n      const numAlign = alignPatPos.length;\n      for (let i = 0; i < numAlign; i++) {\n        for (let j = 0; j < numAlign; j++) {\n          if (!(i == 0 && j == 0 || i == 0 && j == numAlign - 1 || i == numAlign - 1 && j == 0))\n            this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n        }\n      }\n      this.drawFormatBits(0);\n      this.drawVersion();\n    }\n    // Draws two copies of the format bits (with its own error correction code)\n    // based on the given mask and this object's error correction level field.\n    drawFormatBits(mask) {\n      const data = this.errorCorrectionLevel.formatBits << 3 | mask;\n      let rem = data;\n      for (let i = 0; i < 10; i++)\n        rem = rem << 1 ^ (rem >>> 9) * 1335;\n      const bits = (data << 10 | rem) ^ 21522;\n      assert(bits >>> 15 == 0);\n      for (let i = 0; i <= 5; i++)\n        this.setFunctionModule(8, i, getBit(bits, i));\n      this.setFunctionModule(8, 7, getBit(bits, 6));\n      this.setFunctionModule(8, 8, getBit(bits, 7));\n      this.setFunctionModule(7, 8, getBit(bits, 8));\n      for (let i = 9; i < 15; i++)\n        this.setFunctionModule(14 - i, 8, getBit(bits, i));\n      for (let i = 0; i < 8; i++)\n        this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n      for (let i = 8; i < 15; i++)\n        this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n      this.setFunctionModule(8, this.size - 8, true);\n    }\n    // Draws two copies of the version bits (with its own error correction code),\n    // based on this object's version field, iff 7 <= version <= 40.\n    drawVersion() {\n      if (this.version < 7)\n        return;\n      let rem = this.version;\n      for (let i = 0; i < 12; i++)\n        rem = rem << 1 ^ (rem >>> 11) * 7973;\n      const bits = this.version << 12 | rem;\n      assert(bits >>> 18 == 0);\n      for (let i = 0; i < 18; i++) {\n        const color = getBit(bits, i);\n        const a = this.size - 11 + i % 3;\n        const b = Math.floor(i / 3);\n        this.setFunctionModule(a, b, color);\n        this.setFunctionModule(b, a, color);\n      }\n    }\n    // Draws a 9*9 finder pattern including the border separator,\n    // with the center module at (x, y). Modules can be out of bounds.\n    drawFinderPattern(x, y) {\n      for (let dy = -4; dy <= 4; dy++) {\n        for (let dx = -4; dx <= 4; dx++) {\n          const dist = Math.max(Math.abs(dx), Math.abs(dy));\n          const xx = x + dx;\n          const yy = y + dy;\n          if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size)\n            this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n        }\n      }\n    }\n    // Draws a 5*5 alignment pattern, with the center module\n    // at (x, y). All modules must be in bounds.\n    drawAlignmentPattern(x, y) {\n      for (let dy = -2; dy <= 2; dy++) {\n        for (let dx = -2; dx <= 2; dx++)\n          this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n      }\n    }\n    // Sets the color of a module and marks it as a function module.\n    // Only used by the constructor. Coordinates must be in bounds.\n    setFunctionModule(x, y, isDark) {\n      this.modules[y][x] = isDark;\n      this.isFunction[y][x] = true;\n    }\n    /*-- Private helper methods for constructor: Codewords and masking --*/\n    // Returns a new byte string representing the given data with the appropriate error correction\n    // codewords appended to it, based on this object's version and error correction level.\n    addEccAndInterleave(data) {\n      const ver = this.version;\n      const ecl = this.errorCorrectionLevel;\n      if (data.length != _QrCode.getNumDataCodewords(ver, ecl))\n        throw new RangeError(\"Invalid argument\");\n      const numBlocks = _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      const blockEccLen = _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n      const rawCodewords = Math.floor(_QrCode.getNumRawDataModules(ver) / 8);\n      const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n      const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n      let blocks = [];\n      const rsDiv = _QrCode.reedSolomonComputeDivisor(blockEccLen);\n      for (let i = 0, k = 0; i < numBlocks; i++) {\n        let dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n        k += dat.length;\n        const ecc = _QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n        if (i < numShortBlocks)\n          dat.push(0);\n        blocks.push(dat.concat(ecc));\n      }\n      let result = [];\n      for (let i = 0; i < blocks[0].length; i++) {\n        blocks.forEach((block, j) => {\n          if (i != shortBlockLen - blockEccLen || j >= numShortBlocks)\n            result.push(block[i]);\n        });\n      }\n      assert(result.length == rawCodewords);\n      return result;\n    }\n    // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n    // data area of this QR Code. Function modules need to be marked off before this is called.\n    drawCodewords(data) {\n      if (data.length != Math.floor(_QrCode.getNumRawDataModules(this.version) / 8))\n        throw new RangeError(\"Invalid argument\");\n      let i = 0;\n      for (let right = this.size - 1; right >= 1; right -= 2) {\n        if (right == 6)\n          right = 5;\n        for (let vert = 0; vert < this.size; vert++) {\n          for (let j = 0; j < 2; j++) {\n            const x = right - j;\n            const upward = (right + 1 & 2) == 0;\n            const y = upward ? this.size - 1 - vert : vert;\n            if (!this.isFunction[y][x] && i < data.length * 8) {\n              this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n              i++;\n            }\n          }\n        }\n      }\n      assert(i == data.length * 8);\n    }\n    // XORs the codeword modules in this QR Code with the given mask pattern.\n    // The function modules must be marked and the codeword bits must be drawn\n    // before masking. Due to the arithmetic of XOR, calling applyMask() with\n    // the same mask value a second time will undo the mask. A final well-formed\n    // QR Code needs exactly one (not zero, two, etc.) mask applied.\n    applyMask(mask) {\n      if (mask < 0 || mask > 7)\n        throw new RangeError(\"Mask value out of range\");\n      for (let y = 0; y < this.size; y++) {\n        for (let x = 0; x < this.size; x++) {\n          let invert;\n          switch (mask) {\n            case 0:\n              invert = (x + y) % 2 == 0;\n              break;\n            case 1:\n              invert = y % 2 == 0;\n              break;\n            case 2:\n              invert = x % 3 == 0;\n              break;\n            case 3:\n              invert = (x + y) % 3 == 0;\n              break;\n            case 4:\n              invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n              break;\n            case 5:\n              invert = x * y % 2 + x * y % 3 == 0;\n              break;\n            case 6:\n              invert = (x * y % 2 + x * y % 3) % 2 == 0;\n              break;\n            case 7:\n              invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n              break;\n            default:\n              throw new Error(\"Unreachable\");\n          }\n          if (!this.isFunction[y][x] && invert)\n            this.modules[y][x] = !this.modules[y][x];\n        }\n      }\n    }\n    // Calculates and returns the penalty score based on state of this QR Code's current modules.\n    // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n    getPenaltyScore() {\n      let result = 0;\n      for (let y = 0; y < this.size; y++) {\n        let runColor = false;\n        let runX = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let x = 0; x < this.size; x++) {\n          if (this.modules[y][x] == runColor) {\n            runX++;\n            if (runX == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runX > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runX, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runX = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let x = 0; x < this.size; x++) {\n        let runColor = false;\n        let runY = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let y = 0; y < this.size; y++) {\n          if (this.modules[y][x] == runColor) {\n            runY++;\n            if (runY == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runY > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runY, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runY = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let y = 0; y < this.size - 1; y++) {\n        for (let x = 0; x < this.size - 1; x++) {\n          const color = this.modules[y][x];\n          if (color == this.modules[y][x + 1] && color == this.modules[y + 1][x] && color == this.modules[y + 1][x + 1])\n            result += _QrCode.PENALTY_N2;\n        }\n      }\n      let dark = 0;\n      for (const row of this.modules)\n        dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n      const total = this.size * this.size;\n      const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n      assert(0 <= k && k <= 9);\n      result += k * _QrCode.PENALTY_N4;\n      assert(0 <= result && result <= 2568888);\n      return result;\n    }\n    /*-- Private helper functions --*/\n    // Returns an ascending list of positions of alignment patterns for this version number.\n    // Each position is in the range [0,177), and are used on both the x and y axes.\n    // This could be implemented as lookup table of 40 variable-length lists of integers.\n    getAlignmentPatternPositions() {\n      if (this.version == 1)\n        return [];\n      else {\n        const numAlign = Math.floor(this.version / 7) + 2;\n        const step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n        let result = [6];\n        for (let pos = this.size - 7; result.length < numAlign; pos -= step)\n          result.splice(1, 0, pos);\n        return result;\n      }\n    }\n    // Returns the number of data bits that can be stored in a QR Code of the given version number, after\n    // all function modules are excluded. This includes remainder bits, so it might not be a multiple of 8.\n    // The result is in the range [208, 29648]. This could be implemented as a 40-entry lookup table.\n    static getNumRawDataModules(ver) {\n      if (ver < _QrCode.MIN_VERSION || ver > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version number out of range\");\n      let result = (16 * ver + 128) * ver + 64;\n      if (ver >= 2) {\n        const numAlign = Math.floor(ver / 7) + 2;\n        result -= (25 * numAlign - 10) * numAlign - 55;\n        if (ver >= 7)\n          result -= 36;\n      }\n      assert(208 <= result && result <= 29648);\n      return result;\n    }\n    // Returns the number of 8-bit data (i.e. not error correction) codewords contained in any\n    // QR Code of the given version number and error correction level, with remainder bits discarded.\n    // This stateless pure function could be implemented as a (40*4)-cell lookup table.\n    static getNumDataCodewords(ver, ecl) {\n      return Math.floor(_QrCode.getNumRawDataModules(ver) / 8) - _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n    }\n    // Returns a Reed-Solomon ECC generator polynomial for the given degree. This could be\n    // implemented as a lookup table over all possible parameter values, instead of as an algorithm.\n    static reedSolomonComputeDivisor(degree) {\n      if (degree < 1 || degree > 255)\n        throw new RangeError(\"Degree out of range\");\n      let result = [];\n      for (let i = 0; i < degree - 1; i++)\n        result.push(0);\n      result.push(1);\n      let root = 1;\n      for (let i = 0; i < degree; i++) {\n        for (let j = 0; j < result.length; j++) {\n          result[j] = _QrCode.reedSolomonMultiply(result[j], root);\n          if (j + 1 < result.length)\n            result[j] ^= result[j + 1];\n        }\n        root = _QrCode.reedSolomonMultiply(root, 2);\n      }\n      return result;\n    }\n    // Returns the Reed-Solomon error correction codeword for the given data and divisor polynomials.\n    static reedSolomonComputeRemainder(data, divisor) {\n      let result = divisor.map((_) => 0);\n      for (const b of data) {\n        const factor = b ^ result.shift();\n        result.push(0);\n        divisor.forEach((coef, i) => result[i] ^= _QrCode.reedSolomonMultiply(coef, factor));\n      }\n      return result;\n    }\n    // Returns the product of the two given field elements modulo GF(2^8/0x11D). The arguments and result\n    // are unsigned 8-bit integers. This could be implemented as a lookup table of 256*256 entries of uint8.\n    static reedSolomonMultiply(x, y) {\n      if (x >>> 8 != 0 || y >>> 8 != 0)\n        throw new RangeError(\"Byte out of range\");\n      let z = 0;\n      for (let i = 7; i >= 0; i--) {\n        z = z << 1 ^ (z >>> 7) * 285;\n        z ^= (y >>> i & 1) * x;\n      }\n      assert(z >>> 8 == 0);\n      return z;\n    }\n    // Can only be called immediately after a light run is added, and\n    // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n    finderPenaltyCountPatterns(runHistory) {\n      const n = runHistory[1];\n      assert(n <= this.size * 3);\n      const core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n      return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n    }\n    // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n      if (currentRunColor) {\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        currentRunLength = 0;\n      }\n      currentRunLength += this.size;\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      return this.finderPenaltyCountPatterns(runHistory);\n    }\n    // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n    finderPenaltyAddHistory(currentRunLength, runHistory) {\n      if (runHistory[0] == 0)\n        currentRunLength += this.size;\n      runHistory.pop();\n      runHistory.unshift(currentRunLength);\n    }\n  };\n  /*-- Constants and tables --*/\n  // The minimum version number supported in the QR Code Model 2 standard.\n  _QrCode.MIN_VERSION = 1;\n  // The maximum version number supported in the QR Code Model 2 standard.\n  _QrCode.MAX_VERSION = 40;\n  // For use in getPenaltyScore(), when evaluating which mask is best.\n  _QrCode.PENALTY_N1 = 3;\n  _QrCode.PENALTY_N2 = 3;\n  _QrCode.PENALTY_N3 = 40;\n  _QrCode.PENALTY_N4 = 10;\n  _QrCode.ECC_CODEWORDS_PER_BLOCK = [\n    // Version: (note that index 0 is for padding, and is set to an illegal value)\n    //0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n    [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    // Low\n    [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n    // Medium\n    [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    // Quartile\n    [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n    // High\n  ];\n  _QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\n    // Version: (note that index 0 is for padding, and is set to an illegal value)\n    //0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n    [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n    // Low\n    [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n    // Medium\n    [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n    // Quartile\n    [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]\n    // High\n  ];\n  let QrCode = _QrCode;\n  qrcodegen2.QrCode = _QrCode;\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len != 0)\n      throw new RangeError(\"Value out of range\");\n    for (let i = len - 1; i >= 0; i--)\n      bb.push(val >>> i & 1);\n  }\n  function getBit(x, i) {\n    return (x >>> i & 1) != 0;\n  }\n  function assert(cond) {\n    if (!cond)\n      throw new Error(\"Assertion error\");\n  }\n  const _QrSegment = class _QrSegment {\n    /*-- Constructor (low level) and fields --*/\n    // Creates a new QR Code segment with the given attributes and data.\n    // The character count (numChars) must agree with the mode and the bit buffer length,\n    // but the constraint isn't checked. The given bit buffer is cloned and stored.\n    constructor(mode, numChars, bitData) {\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0)\n        throw new RangeError(\"Invalid argument\");\n      this.bitData = bitData.slice();\n    }\n    /*-- Static factory functions (mid level) --*/\n    // Returns a segment representing the given binary data encoded in\n    // byte mode. All input byte arrays are acceptable. Any text string\n    // can be converted to UTF-8 bytes and encoded as a byte mode segment.\n    static makeBytes(data) {\n      let bb = [];\n      for (const b of data)\n        appendBits(b, 8, bb);\n      return new _QrSegment(_QrSegment.Mode.BYTE, data.length, bb);\n    }\n    // Returns a segment representing the given string of decimal digits encoded in numeric mode.\n    static makeNumeric(digits) {\n      if (!_QrSegment.isNumeric(digits))\n        throw new RangeError(\"String contains non-numeric characters\");\n      let bb = [];\n      for (let i = 0; i < digits.length; ) {\n        const n = Math.min(digits.length - i, 3);\n        appendBits(parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb);\n        i += n;\n      }\n      return new _QrSegment(_QrSegment.Mode.NUMERIC, digits.length, bb);\n    }\n    // Returns a segment representing the given text string encoded in alphanumeric mode.\n    // The characters allowed are: 0 to 9, A to Z (uppercase only), space,\n    // dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    static makeAlphanumeric(text) {\n      if (!_QrSegment.isAlphanumeric(text))\n        throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n      let bb = [];\n      let i;\n      for (i = 0; i + 2 <= text.length; i += 2) {\n        let temp = _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n        temp += _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n        appendBits(temp, 11, bb);\n      }\n      if (i < text.length)\n        appendBits(_QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n      return new _QrSegment(_QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n    }\n    // Returns a new mutable list of zero or more segments to represent the given Unicode text string.\n    // The result may use various segment modes and switch modes to optimize the length of the bit stream.\n    static makeSegments(text) {\n      if (text == \"\")\n        return [];\n      else if (_QrSegment.isNumeric(text))\n        return [_QrSegment.makeNumeric(text)];\n      else if (_QrSegment.isAlphanumeric(text))\n        return [_QrSegment.makeAlphanumeric(text)];\n      else\n        return [_QrSegment.makeBytes(_QrSegment.toUtf8ByteArray(text))];\n    }\n    // Returns a segment representing an Extended Channel Interpretation\n    // (ECI) designator with the given assignment value.\n    static makeEci(assignVal) {\n      let bb = [];\n      if (assignVal < 0)\n        throw new RangeError(\"ECI assignment value out of range\");\n      else if (assignVal < 1 << 7)\n        appendBits(assignVal, 8, bb);\n      else if (assignVal < 1 << 14) {\n        appendBits(2, 2, bb);\n        appendBits(assignVal, 14, bb);\n      } else if (assignVal < 1e6) {\n        appendBits(6, 3, bb);\n        appendBits(assignVal, 21, bb);\n      } else\n        throw new RangeError(\"ECI assignment value out of range\");\n      return new _QrSegment(_QrSegment.Mode.ECI, 0, bb);\n    }\n    // Tests whether the given string can be encoded as a segment in numeric mode.\n    // A string is encodable iff each character is in the range 0 to 9.\n    static isNumeric(text) {\n      return _QrSegment.NUMERIC_REGEX.test(text);\n    }\n    // Tests whether the given string can be encoded as a segment in alphanumeric mode.\n    // A string is encodable iff each character is in the following set: 0 to 9, A to Z\n    // (uppercase only), space, dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    static isAlphanumeric(text) {\n      return _QrSegment.ALPHANUMERIC_REGEX.test(text);\n    }\n    /*-- Methods --*/\n    // Returns a new copy of the data bits of this segment.\n    getData() {\n      return this.bitData.slice();\n    }\n    // (Package-private) Calculates and returns the number of bits needed to encode the given segments at\n    // the given version. The result is infinity if a segment has too many characters to fit its length field.\n    static getTotalBits(segs, version) {\n      let result = 0;\n      for (const seg of segs) {\n        const ccbits = seg.mode.numCharCountBits(version);\n        if (seg.numChars >= 1 << ccbits)\n          return Infinity;\n        result += 4 + ccbits + seg.bitData.length;\n      }\n      return result;\n    }\n    // Returns a new array of bytes representing the given string encoded in UTF-8.\n    static toUtf8ByteArray(str) {\n      str = encodeURI(str);\n      let result = [];\n      for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) != \"%\")\n          result.push(str.charCodeAt(i));\n        else {\n          result.push(parseInt(str.substring(i + 1, i + 3), 16));\n          i += 2;\n        }\n      }\n      return result;\n    }\n  };\n  /*-- Constants --*/\n  // Describes precisely all strings that are encodable in numeric mode.\n  _QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  // Describes precisely all strings that are encodable in alphanumeric mode.\n  _QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\n  // The set of all legal characters in alphanumeric mode,\n  // where each character value maps to the index in the string.\n  _QrSegment.ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\n  let QrSegment = _QrSegment;\n  qrcodegen2.QrSegment = _QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrCode;\n  ((QrCode2) => {\n    const _Ecc = class _Ecc {\n      // The QR Code can tolerate about 30% erroneous codewords\n      /*-- Constructor and fields --*/\n      constructor(ordinal, formatBits) {\n        this.ordinal = ordinal;\n        this.formatBits = formatBits;\n      }\n    };\n    /*-- Constants --*/\n    _Ecc.LOW = new _Ecc(0, 1);\n    // The QR Code can tolerate about  7% erroneous codewords\n    _Ecc.MEDIUM = new _Ecc(1, 0);\n    // The QR Code can tolerate about 15% erroneous codewords\n    _Ecc.QUARTILE = new _Ecc(2, 3);\n    // The QR Code can tolerate about 25% erroneous codewords\n    _Ecc.HIGH = new _Ecc(3, 2);\n    let Ecc = _Ecc;\n    QrCode2.Ecc = _Ecc;\n  })(QrCode = qrcodegen2.QrCode || (qrcodegen2.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrSegment;\n  ((QrSegment2) => {\n    const _Mode = class _Mode {\n      /*-- Constructor and fields --*/\n      constructor(modeBits, numBitsCharCount) {\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n      /*-- Method --*/\n      // (Package-private) Returns the bit width of the character count field for a segment in\n      // this mode in a QR Code at the given version number. The result is in the range [0, 16].\n      numCharCountBits(ver) {\n        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n      }\n    };\n    /*-- Constants --*/\n    _Mode.NUMERIC = new _Mode(1, [10, 12, 14]);\n    _Mode.ALPHANUMERIC = new _Mode(2, [9, 11, 13]);\n    _Mode.BYTE = new _Mode(4, [8, 16, 16]);\n    _Mode.KANJI = new _Mode(8, [8, 10, 12]);\n    _Mode.ECI = new _Mode(7, [0, 0, 0]);\n    let Mode = _Mode;\n    QrSegment2.Mode = _Mode;\n  })(QrSegment = qrcodegen2.QrSegment || (qrcodegen2.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\nvar qrcodegen_default = qrcodegen;\n\n// src/index.tsx\n/**\n * @license qrcode.react\n * Copyright (c) Paul O'Shannessy\n * SPDX-License-Identifier: ISC\n */\nvar ERROR_LEVEL_MAP = {\n  L: qrcodegen_default.QrCode.Ecc.LOW,\n  M: qrcodegen_default.QrCode.Ecc.MEDIUM,\n  Q: qrcodegen_default.QrCode.Ecc.QUARTILE,\n  H: qrcodegen_default.QrCode.Ecc.HIGH\n};\nvar DEFAULT_SIZE = 128;\nvar DEFAULT_LEVEL = \"L\";\nvar DEFAULT_BGCOLOR = \"#FFFFFF\";\nvar DEFAULT_FGCOLOR = \"#000000\";\nvar DEFAULT_INCLUDEMARGIN = false;\nvar DEFAULT_MINVERSION = 1;\nvar SPEC_MARGIN_SIZE = 4;\nvar DEFAULT_MARGIN_SIZE = 0;\nvar DEFAULT_IMG_SCALE = 0.1;\nfunction generatePath(modules, margin = 0) {\n  const ops = [];\n  modules.forEach(function(row, y) {\n    let start = null;\n    row.forEach(function(cell, x) {\n      if (!cell && start !== null) {\n        ops.push(\n          `M${start + margin} ${y + margin}h${x - start}v1H${start + margin}z`\n        );\n        start = null;\n        return;\n      }\n      if (x === row.length - 1) {\n        if (!cell) {\n          return;\n        }\n        if (start === null) {\n          ops.push(`M${x + margin},${y + margin} h1v1H${x + margin}z`);\n        } else {\n          ops.push(\n            `M${start + margin},${y + margin} h${x + 1 - start}v1H${start + margin}z`\n          );\n        }\n        return;\n      }\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join(\"\");\n}\nfunction excavateModules(modules, excavation) {\n  return modules.slice().map((row, y) => {\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\n      return row;\n    }\n    return row.map((cell, x) => {\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\n        return cell;\n      }\n      return false;\n    });\n  });\n}\nfunction getImageSettings(cells, size, margin, imageSettings) {\n  if (imageSettings == null) {\n    return null;\n  }\n  const numCells = cells.length + margin * 2;\n  const defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);\n  const scale = numCells / size;\n  const w = (imageSettings.width || defaultSize) * scale;\n  const h = (imageSettings.height || defaultSize) * scale;\n  const x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;\n  const y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;\n  const opacity = imageSettings.opacity == null ? 1 : imageSettings.opacity;\n  let excavation = null;\n  if (imageSettings.excavate) {\n    let floorX = Math.floor(x);\n    let floorY = Math.floor(y);\n    let ceilW = Math.ceil(w + x - floorX);\n    let ceilH = Math.ceil(h + y - floorY);\n    excavation = { x: floorX, y: floorY, w: ceilW, h: ceilH };\n  }\n  const crossOrigin = imageSettings.crossOrigin;\n  return { x, y, h, w, excavation, opacity, crossOrigin };\n}\nfunction getMarginSize(includeMargin, marginSize) {\n  if (marginSize != null) {\n    return Math.max(Math.floor(marginSize), 0);\n  }\n  return includeMargin ? SPEC_MARGIN_SIZE : DEFAULT_MARGIN_SIZE;\n}\nfunction useQRCode({\n  value,\n  level,\n  minVersion,\n  includeMargin,\n  marginSize,\n  imageSettings,\n  size,\n  boostLevel\n}) {\n  let qrcode = React.useMemo(() => {\n    const values = Array.isArray(value) ? value : [value];\n    const segments = values.reduce((accum, v) => {\n      accum.push(...qrcodegen_default.QrSegment.makeSegments(v));\n      return accum;\n    }, []);\n    return qrcodegen_default.QrCode.encodeSegments(\n      segments,\n      ERROR_LEVEL_MAP[level],\n      minVersion,\n      void 0,\n      void 0,\n      boostLevel\n    );\n  }, [value, level, minVersion, boostLevel]);\n  const { cells, margin, numCells, calculatedImageSettings } = React.useMemo(() => {\n    let cells2 = qrcode.getModules();\n    const margin2 = getMarginSize(includeMargin, marginSize);\n    const numCells2 = cells2.length + margin2 * 2;\n    const calculatedImageSettings2 = getImageSettings(\n      cells2,\n      size,\n      margin2,\n      imageSettings\n    );\n    return {\n      cells: cells2,\n      margin: margin2,\n      numCells: numCells2,\n      calculatedImageSettings: calculatedImageSettings2\n    };\n  }, [qrcode, size, imageSettings, includeMargin, marginSize]);\n  return {\n    qrcode,\n    margin,\n    cells,\n    numCells,\n    calculatedImageSettings\n  };\n}\nvar SUPPORTS_PATH2D = function() {\n  try {\n    new Path2D().addPath(new Path2D());\n  } catch (e) {\n    return false;\n  }\n  return true;\n}();\nvar QRCodeCanvas = React.forwardRef(\n  function QRCodeCanvas2(props, forwardedRef) {\n    const _a = props, {\n      value,\n      size = DEFAULT_SIZE,\n      level = DEFAULT_LEVEL,\n      bgColor = DEFAULT_BGCOLOR,\n      fgColor = DEFAULT_FGCOLOR,\n      includeMargin = DEFAULT_INCLUDEMARGIN,\n      minVersion = DEFAULT_MINVERSION,\n      boostLevel,\n      marginSize,\n      imageSettings\n    } = _a, extraProps = __objRest(_a, [\n      \"value\",\n      \"size\",\n      \"level\",\n      \"bgColor\",\n      \"fgColor\",\n      \"includeMargin\",\n      \"minVersion\",\n      \"boostLevel\",\n      \"marginSize\",\n      \"imageSettings\"\n    ]);\n    const _b = extraProps, { style } = _b, otherProps = __objRest(_b, [\"style\"]);\n    const imgSrc = imageSettings == null ? void 0 : imageSettings.src;\n    const _canvas = React.useRef(null);\n    const _image = React.useRef(null);\n    const setCanvasRef = React.useCallback(\n      (node) => {\n        _canvas.current = node;\n        if (typeof forwardedRef === \"function\") {\n          forwardedRef(node);\n        } else if (forwardedRef) {\n          forwardedRef.current = node;\n        }\n      },\n      [forwardedRef]\n    );\n    const [isImgLoaded, setIsImageLoaded] = React.useState(false);\n    const { margin, cells, numCells, calculatedImageSettings } = useQRCode({\n      value,\n      level,\n      minVersion,\n      boostLevel,\n      includeMargin,\n      marginSize,\n      imageSettings,\n      size\n    });\n    React.useEffect(() => {\n      if (_canvas.current != null) {\n        const canvas = _canvas.current;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n          return;\n        }\n        let cellsToDraw = cells;\n        const image = _image.current;\n        const haveImageToRender = calculatedImageSettings != null && image !== null && image.complete && image.naturalHeight !== 0 && image.naturalWidth !== 0;\n        if (haveImageToRender) {\n          if (calculatedImageSettings.excavation != null) {\n            cellsToDraw = excavateModules(\n              cells,\n              calculatedImageSettings.excavation\n            );\n          }\n        }\n        const pixelRatio = window.devicePixelRatio || 1;\n        canvas.height = canvas.width = size * pixelRatio;\n        const scale = size / numCells * pixelRatio;\n        ctx.scale(scale, scale);\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, numCells, numCells);\n        ctx.fillStyle = fgColor;\n        if (SUPPORTS_PATH2D) {\n          ctx.fill(new Path2D(generatePath(cellsToDraw, margin)));\n        } else {\n          cells.forEach(function(row, rdx) {\n            row.forEach(function(cell, cdx) {\n              if (cell) {\n                ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n              }\n            });\n          });\n        }\n        if (calculatedImageSettings) {\n          ctx.globalAlpha = calculatedImageSettings.opacity;\n        }\n        if (haveImageToRender) {\n          ctx.drawImage(\n            image,\n            calculatedImageSettings.x + margin,\n            calculatedImageSettings.y + margin,\n            calculatedImageSettings.w,\n            calculatedImageSettings.h\n          );\n        }\n      }\n    });\n    React.useEffect(() => {\n      setIsImageLoaded(false);\n    }, [imgSrc]);\n    const canvasStyle = __spreadValues({ height: size, width: size }, style);\n    let img = null;\n    if (imgSrc != null) {\n      img = /* @__PURE__ */ React.createElement(\n        \"img\",\n        {\n          src: imgSrc,\n          key: imgSrc,\n          style: { display: \"none\" },\n          onLoad: () => {\n            setIsImageLoaded(true);\n          },\n          ref: _image,\n          crossOrigin: calculatedImageSettings == null ? void 0 : calculatedImageSettings.crossOrigin\n        }\n      );\n    }\n    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(\n      \"canvas\",\n      __spreadValues({\n        style: canvasStyle,\n        height: size,\n        width: size,\n        ref: setCanvasRef,\n        role: \"img\"\n      }, otherProps)\n    ), img);\n  }\n);\nQRCodeCanvas.displayName = \"QRCodeCanvas\";\nvar QRCodeSVG = React.forwardRef(\n  function QRCodeSVG2(props, forwardedRef) {\n    const _a = props, {\n      value,\n      size = DEFAULT_SIZE,\n      level = DEFAULT_LEVEL,\n      bgColor = DEFAULT_BGCOLOR,\n      fgColor = DEFAULT_FGCOLOR,\n      includeMargin = DEFAULT_INCLUDEMARGIN,\n      minVersion = DEFAULT_MINVERSION,\n      boostLevel,\n      title,\n      marginSize,\n      imageSettings\n    } = _a, otherProps = __objRest(_a, [\n      \"value\",\n      \"size\",\n      \"level\",\n      \"bgColor\",\n      \"fgColor\",\n      \"includeMargin\",\n      \"minVersion\",\n      \"boostLevel\",\n      \"title\",\n      \"marginSize\",\n      \"imageSettings\"\n    ]);\n    const { margin, cells, numCells, calculatedImageSettings } = useQRCode({\n      value,\n      level,\n      minVersion,\n      boostLevel,\n      includeMargin,\n      marginSize,\n      imageSettings,\n      size\n    });\n    let cellsToDraw = cells;\n    let image = null;\n    if (imageSettings != null && calculatedImageSettings != null) {\n      if (calculatedImageSettings.excavation != null) {\n        cellsToDraw = excavateModules(\n          cells,\n          calculatedImageSettings.excavation\n        );\n      }\n      image = /* @__PURE__ */ React.createElement(\n        \"image\",\n        {\n          href: imageSettings.src,\n          height: calculatedImageSettings.h,\n          width: calculatedImageSettings.w,\n          x: calculatedImageSettings.x + margin,\n          y: calculatedImageSettings.y + margin,\n          preserveAspectRatio: \"none\",\n          opacity: calculatedImageSettings.opacity,\n          crossOrigin: calculatedImageSettings.crossOrigin\n        }\n      );\n    }\n    const fgPath = generatePath(cellsToDraw, margin);\n    return /* @__PURE__ */ React.createElement(\n      \"svg\",\n      __spreadValues({\n        height: size,\n        width: size,\n        viewBox: `0 0 ${numCells} ${numCells}`,\n        ref: forwardedRef,\n        role: \"img\"\n      }, otherProps),\n      !!title && /* @__PURE__ */ React.createElement(\"title\", null, title),\n      /* @__PURE__ */ React.createElement(\n        \"path\",\n        {\n          fill: bgColor,\n          d: `M0,0 h${numCells}v${numCells}H0z`,\n          shapeRendering: \"crispEdges\"\n        }\n      ),\n      /* @__PURE__ */ React.createElement(\"path\", { fill: fgColor, d: fgPath, shapeRendering: \"crispEdges\" }),\n      image\n    );\n  }\n);\nQRCodeSVG.displayName = \"QRCodeSVG\";\nexport {\n  QRCodeCanvas,\n  QRCodeSVG\n};\n"],
  "mappings": "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",
  "names": ["import_react", "__defProp", "__getOwnPropSymbols", "__hasOwnProp", "__propIsEnum", "__defNormalProp", "obj", "key", "value", "__spreadValues", "a", "b", "prop", "__objRest", "source", "exclude", "target", "qrcodegen", "qrcodegen2", "_QrCode", "version", "errorCorrectionLevel", "dataCodewords", "msk", "row", "allCodewords", "minPenalty", "i", "penalty", "assert", "text", "ecl", "segs", "data", "seg", "minVersion", "maxVersion", "mask", "boostEcl", "dataUsedBits", "dataCapacityBits2", "usedBits", "QrSegment", "newEcl", "bb", "appendBits", "dataCapacityBits", "padByte", "x", "y", "alignPatPos", "numAlign", "j", "rem", "bits", "getBit", "color", "dy", "dx", "dist", "xx", "yy", "isDark", "ver", "numBlocks", "blockEccLen", "rawCodewords", "numShortBlocks", "shortBlockLen", "blocks", "rsDiv", "k", "dat", "ecc", "result", "block", "right", "vert", "invert", "runColor", "runX", "runHistory", "runY", "dark", "sum", "total", "step", "pos", "degree", "root", "divisor", "_", "factor", "coef", "z", "n", "core", "currentRunColor", "currentRunLength", "QrCode", "val", "len", "cond", "_QrSegment", "mode", "numChars", "bitData", "digits", "temp", "assignVal", "ccbits", "str", "QrCode2", "_Ecc", "ordinal", "formatBits", "Ecc", "QrSegment2", "_Mode", "modeBits", "numBitsCharCount", "Mode", "qrcodegen_default", "ERROR_LEVEL_MAP", "DEFAULT_SIZE", "DEFAULT_LEVEL", "DEFAULT_BGCOLOR", "DEFAULT_FGCOLOR", "DEFAULT_INCLUDEMARGIN", "DEFAULT_MINVERSION", "SPEC_MARGIN_SIZE", "DEFAULT_MARGIN_SIZE", "DEFAULT_IMG_SCALE", "generatePath", "modules", "margin", "ops", "start", "cell", "excavateModules", "excavation", "getImageSettings", "cells", "size", "imageSettings", "numCells", "defaultSize", "scale", "w", "h", "opacity", "floorX", "floorY", "ceilW", "ceilH", "crossOrigin", "getMarginSize", "includeMargin", "marginSize", "useQRCode", "level", "boostLevel", "qrcode", "React", "segments", "accum", "v", "calculatedImageSettings", "cells2", "margin2", "numCells2", "calculatedImageSettings2", "SUPPORTS_PATH2D", "QRCodeCanvas", "props", "forwardedRef", "_a", "bgColor", "fgColor", "_b", "style", "otherProps", "imgSrc", "_canvas", "_image", "setCanvasRef", "node", "isImgLoaded", "setIsImageLoaded", "canvas", "ctx", "cellsToDraw", "image", "haveImageToRender", "pixelRatio", "rdx", "cdx", "canvasStyle", "img", "QRCodeSVG", "title", "fgPath"]
}
